//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.3053
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("UsbUirtService")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("UsbUirtService")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="UsbUirtService.Y2009.M01, Version=1.0.0.0, Culture=neutral, PublicKeyToken=92e973" +
    "6a54038d60")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace Dss.Transforms.TransformUsbUirtService {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::UsbUirtService.Proxy.UsbUirtServiceState), new global::Microsoft.Dss.Core.Attributes.Transform(UsbUirtService_Proxy_UsbUirtServiceState_TO_UsbUirtService_UsbUirtServiceState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::UsbUirtService.UsbUirtServiceState), new global::Microsoft.Dss.Core.Attributes.Transform(UsbUirtService_UsbUirtServiceState_TO_UsbUirtService_Proxy_UsbUirtServiceState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::UsbUirtService.Proxy.TransmitRequest), new global::Microsoft.Dss.Core.Attributes.Transform(UsbUirtService_Proxy_TransmitRequest_TO_UsbUirtService_TransmitRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::UsbUirtService.TransmitRequest), new global::Microsoft.Dss.Core.Attributes.Transform(UsbUirtService_TransmitRequest_TO_UsbUirtService_Proxy_TransmitRequest));
        }
        
        private static global::UsbUirtService.Proxy.UsbUirtServiceState _cachedInstance0 = new global::UsbUirtService.Proxy.UsbUirtServiceState();
        
        private static global::UsbUirtService.UsbUirtServiceState _cachedInstance = new global::UsbUirtService.UsbUirtServiceState();
        
        public static object UsbUirtService_Proxy_UsbUirtServiceState_TO_UsbUirtService_UsbUirtServiceState(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object UsbUirtService_UsbUirtServiceState_TO_UsbUirtService_Proxy_UsbUirtServiceState(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object UsbUirtService_Proxy_TransmitRequest_TO_UsbUirtService_TransmitRequest(object transformFrom) {
            global::UsbUirtService.TransmitRequest target = new global::UsbUirtService.TransmitRequest();
            global::UsbUirtService.Proxy.TransmitRequest from = ((global::UsbUirtService.Proxy.TransmitRequest)(transformFrom));
            target.irCode = from.irCode;
            target.codeFormat = from.codeFormat;
            target.repeatCount = from.repeatCount;
            target.inactivityWaitTime = from.inactivityWaitTime;
            return target;
        }
        
        public static object UsbUirtService_TransmitRequest_TO_UsbUirtService_Proxy_TransmitRequest(object transformFrom) {
            global::UsbUirtService.Proxy.TransmitRequest target = new global::UsbUirtService.Proxy.TransmitRequest();
            global::UsbUirtService.TransmitRequest from = ((global::UsbUirtService.TransmitRequest)(transformFrom));
            target.irCode = from.irCode;
            target.codeFormat = from.codeFormat;
            target.repeatCount = from.repeatCount;
            target.inactivityWaitTime = from.inactivityWaitTime;
            return target;
        }
    }
}
